name: Build and Deploy to ECS

on:
  push:
    branches: [ devops-di ]
  pull_request:
    branches: [ devops-di ]

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  AWS_OIDC_PROVIDER_ARN: ${{ vars.AWS_OIDC_PROVIDER_ARN }}
  AWS_ROLE_ARN: ${{ vars.AWS_ROLE_ARN }}
  IMAGE_TAG: ${{ github.sha }}
  TF_WORKSPACE: dev

permissions:
  contents: read
  id-token: write

jobs:
  terraform-deploy:
    name: Terraform Deploy Infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: terraform-deploy-${{ github.head_ref }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.2

      - name: Terraform Init
        run: terraform init -backend-config="bucket=meetlyomni-tf-state-bucket-${{ env.TF_WORKSPACE }}" -backend-config="key=${{ env.TF_WORKSPACE }}/terraform.tfstate" -backend-config="dynamodb_table=terraform-state-locks-${{ env.TF_WORKSPACE }}" -backend-config="region=${{ env.AWS_REGION }}"
        working-directory: ./terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan -var="environment=${{ env.TF_WORKSPACE }}" -out=tfplan
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform

  build-and-deploy:
    name: Build, Push, and Update Infrastructure
    runs-on: ubuntu-latest
    needs: terraform-deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: deploy-${{ github.head_ref }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check if image exists in ECR
        id: check-image
        run: |
          # Extract repository name from full ECR URI
          REPO_NAME=$(echo "${{ env.ECR_REPOSITORY }}" | cut -d'/' -f2)
          # Check if the specific tag exists in ECR
          if aws ecr describe-images --repository-name $REPO_NAME --image-ids imageTag=${{ env.IMAGE_TAG }} > /dev/null 2>&1; then
            echo "Image already exists in ECR"
            echo "image_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Image does not exist in ECR, will build and push"
            echo "image_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build, tag, and push image to ECR
        if: steps.check-image.outputs.image_exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/MeetlyOmni.Api/Dockerfile
          push: true
          tags: |
            ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            ${{ env.ECR_REPOSITORY }}:latest

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.2

      - name: Terraform Init
        run: terraform init -backend-config="bucket=meetlyomni-tf-state-bucket-${{ env.TF_WORKSPACE }}" -backend-config="key=${{ env.TF_WORKSPACE }}/terraform.tfstate" -backend-config="dynamodb_table=terraform-state-locks-${{ env.TF_WORKSPACE }}" -backend-config="region=${{ env.AWS_REGION }}"
        working-directory: ./terraform

      - name: Update Terraform with new image
        run: terraform apply -auto-approve -var="container_image=${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" -var="environment=${{ env.TF_WORKSPACE }}"
        working-directory: ./terraform
