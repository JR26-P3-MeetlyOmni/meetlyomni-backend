// <auto-generated />
using System;
using System.Collections.Generic;
using System.Text.Json.Nodes;
using MeetlyOmni.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MeetlyOmni.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250722072819_AddMissingConstraintsAndIndexes")]
    partial class AddMissingConstraintsAndIndexes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MeetlyOmni.Api.Data.Entities.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Draft");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("EventId");

                    b.HasIndex("StartTime")
                        .HasDatabaseName("IX_Event_StartTime");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Event_Status");

                    b.HasIndex("OrgId", "Status")
                        .HasDatabaseName("IX_Event_OrgId_Status");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("MeetlyOmni.Api.Data.Entities.EventContentBlock", b =>
                {
                    b.Property<Guid>("BlockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BlockType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<JsonObject>("Content")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<int?>("OrderNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("Visible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.HasKey("BlockId");

                    b.HasIndex("BlockType")
                        .HasDatabaseName("IX_EventContentBlock_BlockType");

                    b.HasIndex("EventId", "OrderNum")
                        .HasDatabaseName("IX_EventContentBlock_EventId_OrderNum");

                    b.HasIndex("EventId", "Visible")
                        .HasDatabaseName("IX_EventContentBlock_EventId_Visible");

                    b.ToTable("EventContentBlock");
                });

            modelBuilder.Entity("MeetlyOmni.Api.Data.Entities.EventGameInstance", b =>
                {
                    b.Property<Guid>("InstanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<int?>("OrderNum")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Draft");

                    b.Property<string>("TitleOverride")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("InstanceId");

                    b.HasIndex("GameId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_EventGameInstance_Status");

                    b.HasIndex("EventId", "OrderNum")
                        .HasDatabaseName("IX_EventGameInstance_EventId_OrderNum");

                    b.HasIndex("EventId", "Status")
                        .HasDatabaseName("IX_EventGameInstance_EventId_Status");

                    b.ToTable("EventGameInstance");
                });

            modelBuilder.Entity("MeetlyOmni.Api.Data.Entities.Game", b =>
                {
                    b.Property<Guid>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<JsonObject>("Config")
                        .HasColumnType("jsonb");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("GameId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Game_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Game_CreatedBy");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_Game_Type");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("MeetlyOmni.Api.Data.Entities.GameRecord", b =>
                {
                    b.Property<Guid>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("InstanceId")
                        .HasColumnType("uuid");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uuid");

                    b.Property<JsonObject>("ResponseData")
                        .HasColumnType("jsonb");

                    b.Property<int?>("Score")
                        .HasColumnType("integer");

                    b.HasKey("RecordId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_GameRecord_CreatedAt");

                    b.HasIndex("MemberId");

                    b.HasIndex("InstanceId", "MemberId")
                        .HasDatabaseName("IX_GameRecord_InstanceId_MemberId");

                    b.HasIndex("OrgId", "CreatedAt")
                        .HasDatabaseName("IX_GameRecord_OrgId_CreatedAt");

                    b.ToTable("GameRecord");
                });

            modelBuilder.Entity("MeetlyOmni.Api.Data.Entities.Guest", b =>
                {
                    b.Property<Guid>("GuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Bio")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Company")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Position")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<JsonObject>("SocialLinks")
                        .HasColumnType("jsonb");

                    b.HasKey("GuestId");

                    b.HasIndex("EventId", "Order")
                        .HasDatabaseName("IX_Guest_EventId_Order");

                    b.ToTable("Guest");
                });

            modelBuilder.Entity("MeetlyOmni.Api.Data.Entities.Member", b =>
                {
                    b.Property<string>("MemberId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LanguagePref")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LocalMemberNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Nickname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Active");

                    b.Property<List<string>>("Tags")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValueSql("'[]'::jsonb");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("MemberId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Member_CreatedAt");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Member_Status");

                    b.HasIndex("OrgId", "Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Member_OrgId_Email");

                    b.HasIndex("OrgId", "LocalMemberNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Member_OrgId_LocalMemberNumber");

                    b.HasIndex("OrgId", "Status")
                        .HasDatabaseName("IX_Member_OrgId_Status");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("MeetlyOmni.Api.Data.Entities.MemberActivityLog", b =>
                {
                    b.Property<Guid>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<JsonObject>("EventDetail")
                        .HasColumnType("jsonb");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uuid");

                    b.HasKey("LogId");

                    b.HasIndex("MemberId");

                    b.HasIndex("OrgId");

                    b.ToTable("MemberActivityLogs");
                });

            modelBuilder.Entity("MeetlyOmni.Api.Data.Entities.Organization", b =>
                {
                    b.Property<Guid>("OrgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CoverImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("FollowerCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<List<string>>("IndustryTags")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValueSql("'[]'::jsonb");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OrganizationCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PlanType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Free");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("OrgId");

                    b.HasIndex("OrganizationCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Organization_OrganizationCode");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("MeetlyOmni.Api.Data.Entities.RaffleTicket", b =>
                {
                    b.Property<Guid>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("IssueTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("IssuedBy")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Unused");

                    b.HasKey("TicketId");

                    b.HasIndex("MemberId");

                    b.HasIndex("OrgId");

                    b.ToTable("RaffleTickets");
                });

            modelBuilder.Entity("MeetlyOmni.Api.Data.Entities.Event", b =>
                {
                    b.HasOne("MeetlyOmni.Api.Data.Entities.Organization", "Organization")
                        .WithMany("Events")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("MeetlyOmni.Api.Data.Entities.EventContentBlock", b =>
                {
                    b.HasOne("MeetlyOmni.Api.Data.Entities.Event", "Event")
                        .WithMany("ContentBlocks")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("MeetlyOmni.Api.Data.Entities.EventGameInstance", b =>
                {
                    b.HasOne("MeetlyOmni.Api.Data.Entities.Event", "Event")
                        .WithMany("EventGameInstances")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeetlyOmni.Api.Data.Entities.Game", "Game")
                        .WithMany("EventGameInstances")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("MeetlyOmni.Api.Data.Entities.GameRecord", b =>
                {
                    b.HasOne("MeetlyOmni.Api.Data.Entities.EventGameInstance", "EventGameInstance")
                        .WithMany("GameRecords")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeetlyOmni.Api.Data.Entities.Member", "Member")
                        .WithMany("GameRecords")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeetlyOmni.Api.Data.Entities.Organization", "Organization")
                        .WithMany("GameRecords")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventGameInstance");

                    b.Navigation("Member");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("MeetlyOmni.Api.Data.Entities.Guest", b =>
                {
                    b.HasOne("MeetlyOmni.Api.Data.Entities.Event", "Event")
                        .WithMany("Guests")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("MeetlyOmni.Api.Data.Entities.Member", b =>
                {
                    b.HasOne("MeetlyOmni.Api.Data.Entities.Organization", "Organization")
                        .WithMany("Members")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("MeetlyOmni.Api.Data.Entities.MemberActivityLog", b =>
                {
                    b.HasOne("MeetlyOmni.Api.Data.Entities.Member", "Member")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeetlyOmni.Api.Data.Entities.Organization", "Organization")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("MeetlyOmni.Api.Data.Entities.RaffleTicket", b =>
                {
                    b.HasOne("MeetlyOmni.Api.Data.Entities.Member", "Member")
                        .WithMany("RaffleTickets")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeetlyOmni.Api.Data.Entities.Organization", "Organization")
                        .WithMany("RaffleTickets")
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("MeetlyOmni.Api.Data.Entities.Event", b =>
                {
                    b.Navigation("ContentBlocks");

                    b.Navigation("EventGameInstances");

                    b.Navigation("Guests");
                });

            modelBuilder.Entity("MeetlyOmni.Api.Data.Entities.EventGameInstance", b =>
                {
                    b.Navigation("GameRecords");
                });

            modelBuilder.Entity("MeetlyOmni.Api.Data.Entities.Game", b =>
                {
                    b.Navigation("EventGameInstances");
                });

            modelBuilder.Entity("MeetlyOmni.Api.Data.Entities.Member", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("GameRecords");

                    b.Navigation("RaffleTickets");
                });

            modelBuilder.Entity("MeetlyOmni.Api.Data.Entities.Organization", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("Events");

                    b.Navigation("GameRecords");

                    b.Navigation("Members");

                    b.Navigation("RaffleTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
